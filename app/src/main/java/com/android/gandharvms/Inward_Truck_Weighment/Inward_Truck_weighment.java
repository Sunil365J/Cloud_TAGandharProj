package com.android.gandharvms.Inward_Truck_Weighment;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.TimePicker;
import android.widget.Toast;

import com.android.gandharvms.FcmNotificationsSender;
import com.android.gandharvms.Inward_Truck;
import com.android.gandharvms.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.messaging.FirebaseMessaging;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class Inward_Truck_weighment extends AppCompatActivity {

    //prince
    private SharedPreferences sharedPreferences;
    private int autoGeneratedNumber;private final int MAX_LENGTH=10;

    EditText etint,etserialnumber,etvehicalnumber,etsupplier,etmaterial,etcustomer,etdriver,etoanumber,etdate,etgrossweight,ettareweight,etnetweight,etdensity,etbatchno,etsignby,etdatetime;

    Button intsubmit;
    Button view;
    FirebaseFirestore trwdbroot;
    DatePickerDialog picker;
    EditText datetimeTextview;
    Calendar calendar = Calendar.getInstance();
    TimePickerDialog tpicker;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_inward_truck_weighment);
        //Send Notification to all
        //Send Notification to all
        FirebaseMessaging.getInstance().subscribeToTopic("cCeBwmIxRz2HRH6A6blM94:APA91bHCinIPsP8HvzUL3qLI9EXBo0l8wAS5pJmz2UdxahlFpe_FMoRC0SyH9DgcbBoCXrwZy01YMr_QZcpSFnXOhoKGE2S17Bn39xW7MTLDyh0UnvwqLvdcotNoqDl6UyJ5oCBC990z");

        //Prince
         //Send Notification to All
        sharedPreferences = getSharedPreferences("TruckWeighment", MODE_PRIVATE);

        etint = (EditText) findViewById(R.id.etintime);
        etserialnumber=(EditText) findViewById(R.id.ettrwserialnumber);
        etvehicalnumber=(EditText) findViewById(R.id.ettrwvehicalno);
        etsupplier=(EditText) findViewById(R.id.ettrwsupplier);
        etmaterial=(EditText) findViewById(R.id.ettrwmaterial);
        etcustomer=(EditText) findViewById(R.id.ettrwcustomer);
        etdriver=(EditText) findViewById(R.id.ettrdriver);
        etoanumber=(EditText) findViewById(R.id.ettroa);
        etdate= (EditText) findViewById(R.id.ettrdate);
        etgrossweight=(EditText) findViewById(R.id.ettrgrossweight);
        ettareweight=(EditText) findViewById(R.id.ettrtareweight);
        etnetweight=(EditText) findViewById(R.id.ettrnetweight);
        etdensity=(EditText) findViewById(R.id.ettrdensity);
        etbatchno =(EditText) findViewById(R.id.ettrbatch);
        etsignby =(EditText) findViewById(R.id.ettrsignby);
        etdatetime=(EditText) findViewById(R.id.ettrdatetime);



                                  // listing Data button

        view = findViewById(R.id.viewclick);
        view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(Inward_Truck_weighment.this, Inward_Truck_Weighment_Viewdata.class));
            }
        });


        //datetime
        datetimeTextview=findViewById(R.id.ettrdatetime);
        datetimeTextview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showDatePicker();
            }
        });

        //single date

        etdate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar calendar = Calendar.getInstance();
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                int month = calendar.get(Calendar.MONTH);
                int year = calendar.get(Calendar.YEAR);
                // Array of month abbreviations
                String[] monthAbbreviations = new String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
                picker = new DatePickerDialog(Inward_Truck_weighment.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        // Use the month abbreviation from the array
                        String monthAbbreviation = monthAbbreviations[month];
                        etdate.setText(dayOfMonth + "/" + monthAbbreviation + "/" + year);
                    }
                }, year, month, day);
                picker.show();
            }
        });






        etvehicalnumber.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }
            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }
            @Override
            public void afterTextChanged(Editable editable) {
                if (editable.length() > MAX_LENGTH) {
                    etvehicalnumber.removeTextChangedListener(this);
                    String trimmedText = editable.toString().substring(0, MAX_LENGTH);
                    etvehicalnumber.setText(trimmedText);
                    etvehicalnumber.setSelection(MAX_LENGTH); // Move cursor to the end
                    etvehicalnumber.addTextChangedListener(this);
                }else if (editable.length() < MAX_LENGTH) {
                    // Show an error message for less than 10 digits
                    etvehicalnumber.setError("Invalid format. Enter 10 Character. \n Vehicle No Format - ST00AA9999 OR YYBR9999AA");
                } else {
                    // Clear any previous error message when valid
                    etvehicalnumber.setError(null);
                }
            }
        });

        etdriver.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }
            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }
            @Override
            public void afterTextChanged(Editable editable) {
                if (editable.length() > MAX_LENGTH) {
                    etdriver.removeTextChangedListener(this);
                    String trimmedText = editable.toString().substring(0, MAX_LENGTH);
                    etdriver.setText(trimmedText);
                    etdriver.setSelection(MAX_LENGTH); // Move cursor to the end
                    etdriver.addTextChangedListener(this);
                }else if (editable.length() < MAX_LENGTH) {
                    // Show an error message for less than 10 digits
                    etdriver.setError("Invalid format. Enter 10 digits");
                } else {
                    // Clear any previous error message when valid
                    etdriver.setError(null);
                }
            }
        });

        intsubmit=(Button) findViewById(R.id.wesubmit);
        trwdbroot=FirebaseFirestore.getInstance();

        //Prince
// AUTO GENRATED SERIAL NUMBER
        int lastDay = sharedPreferences.getInt("lastDay", -1);
        int currentDay = Integer.parseInt(getDay());
        if (currentDay != lastDay) {
            // Day has changed, reset auto-generated number to 1
            sharedPreferences.edit().putInt("autoGeneratedNumber", 1).apply();
            sharedPreferences.edit().putInt("lastDay", currentDay).apply();
        }

        if (sharedPreferences != null) {
            autoGeneratedNumber = sharedPreferences.getInt("autoGeneratedNumber", 1);
            String autoGeneratedNumberString = String.format("%03d", autoGeneratedNumber);
            // Create the serial number
            String serialNumber = "W" + GetYear() + getMonth() + getDay() + autoGeneratedNumberString;
            // Set the serial number in the EditText
            etserialnumber.setText(serialNumber);
            // Increment and store the auto-generated number for the next vehicle
        } else {
            // Handle the case where sharedPreferences is null
            // This might involve displaying an error message or taking appropriate action
            Log.e("MainActivity", "SharedPreferences is null");
        }

        etint.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Calendar calendar = Calendar.getInstance();
                int hours = calendar.get(Calendar.HOUR_OF_DAY);
                int mins = calendar.get(Calendar.MINUTE);
                tpicker = new TimePickerDialog(Inward_Truck_weighment.this, new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                        Calendar c = Calendar.getInstance();
                        c.set(Calendar.HOUR_OF_DAY,hourOfDay);
                        c.set(Calendar.MINUTE,minute);

                        // Set the formatted time to the EditText
                        etint.setText(hourOfDay +":"+ minute );
                    }
                },hours,mins,false);
                tpicker.show();
            }
        });


        intsubmit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                intrinsert();
            }
        });
    }


    public void showDatePicker()
    {
        DatePickerDialog datePickerDialog = new DatePickerDialog(Inward_Truck_weighment.this, new DatePickerDialog.OnDateSetListener() {
            @Override
            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                calendar.set(Calendar.YEAR, year);
                calendar.set(Calendar.MONTH, month);


                showTimePicker();
            }
        },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
        );
        datePickerDialog.show();
    }

    public void showTimePicker()
    {
        TimePickerDialog timePickerDialog = new TimePickerDialog(Inward_Truck_weighment.this, new TimePickerDialog.OnTimeSetListener() {
            @Override
            public void onTimeSet(TimePicker view, int hourOfDay, int minute) {


                calendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
                calendar.set(Calendar.MINUTE, minute);

                handleDateTimeSelection(calendar.getTime());

            }
        }, calendar.get(Calendar.HOUR_OF_DAY),
                calendar.get(Calendar.MINUTE),
                true
        );
        timePickerDialog.show();
    }

    public void handleDateTimeSelection(java.util.Date dateTime)
    {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMM yyyy, hh:mm a", Locale.getDefault());
        datetimeTextview.setText(dateFormat.format(dateTime.getTime()));

    }

    //prince
    private String GetYear() {
        SimpleDateFormat yearFormat = new SimpleDateFormat("yy", Locale.getDefault());
        return yearToLetter(yearFormat.format(new Date()));
    }

    private String getMonth() {
        SimpleDateFormat monthFormat = new SimpleDateFormat("MM", Locale.getDefault());
        return monthToLetter(monthFormat.format(new Date()));
    }

    private String getDay() {
        SimpleDateFormat dayFormat = new SimpleDateFormat("dd", Locale.getDefault());
        return dayFormat.format(new Date());
    }
    private String monthToLetter(String month) {
        switch (month) {
            case "01":
                return "A";
            case "02":
                return "B";
            case "03":
                return "C";
            case "04":
                return "D";
            case "05":
                return "E";
            case "06":
                return "F";
            case "07":
                return "G";
            case "08":
                return "H";
            case "09":
                return "I";
            case "10":
                return "J";
            case "11":
                return "K";
            case "12":
                return "L";
            default:
                return null; // Default to January (A) if month is not recognized
        }
    }
    private String yearToLetter(String month) {
        switch (month) {
            case "23":
                return "A";
            case "24":
                return "B";
            case "25":
                return "C";
            case "26":
                return "D";
            case "28":
                return "E";
            case "29":
                return "F";
            case "30":
                return "G";
            case "31":
                return "H";
            case "32":
                return "I";
            case "33":
                return "J";
            case "34":
                return "K";
            case "35":
                return "L";
            case "36":
                return "M";
            case "37":
                return "N";
            case "38":
                return "O";
            case "39":
                return "P";
            case "40":
                return "Q";
            case "41":
                return "R";
            case "42":
                return "S";
            case "43":
                return "T";
            case "44":
                return "U";
            case "45":
                return "V";
            case "46":
                return "W";
            case "47":
                return "X";
            case "48":
                return "Y";
            case "49":
                return "Z";
            default:
                return null;
            // Default to Null if month is not recognized
        }
    }
    private String getCurrentTime() {
        // Get the current time
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm", Locale.getDefault());
        return sdf.format(new Date());
    }

    public void makeNotification(String vehicleNo,String outTime){
        FcmNotificationsSender notificationsSender = new FcmNotificationsSender("cCeBwmIxRz2HRH6A6blM94:APA91bHCinIPsP8HvzUL3qLI9EXBo0l8wAS5pJmz2UdxahlFpe_FMoRC0SyH9DgcbBoCXrwZy01YMr_QZcpSFnXOhoKGE2S17Bn39xW7MTLDyh0UnvwqLvdcotNoqDl6UyJ5oCBC990z",
                "Inward Truck Weighment Process Done..!",
                "Vehicle Number:-" + vehicleNo + " has Completed Weighment Process at " + outTime,
                getApplicationContext(), Inward_Truck_weighment.this);
        notificationsSender.SendNotifications();
    }

    public void intrinsert()
    {
        String intime = etint.getText().toString().trim();
        String serial_Number=etserialnumber.getText().toString().trim();
        String vehicalnumber=etvehicalnumber.getText().toString().trim();
        String supplier=etsupplier.getText().toString().trim();
        String material=etmaterial.getText().toString().trim();
        String Driver = etdriver.getText().toString().trim();
        String customer = etcustomer.getText().toString().trim();
        String oanumber = etoanumber.getText().toString().trim();
        String date = etdate.getText().toString().trim();
        String Grossweight = etgrossweight.getText().toString().trim();
        String Tareweight = ettareweight.getText().toString().trim();
        String netweight = etnetweight.getText().toString().trim();
        String Density = etdensity.getText().toString().trim();
        String Batchno = etbatchno.getText().toString().trim();
        String signby = etsignby.getText().toString().trim();
        String DateTime = etdatetime.getText().toString().trim();
        String outTime = getCurrentTime();


        if ( intime.isEmpty()|| serial_Number.isEmpty()|| vehicalnumber.isEmpty()|| supplier.isEmpty()|| material.isEmpty()|| Driver.isEmpty() || customer.isEmpty()||oanumber.isEmpty()|| date.isEmpty()||Grossweight.isEmpty()
        || Tareweight.isEmpty()|| netweight.isEmpty()|| Density.isEmpty()|| Batchno.isEmpty()|| signby.isEmpty()|| DateTime.isEmpty()){
            Toast.makeText(this, "All fields must be filled", Toast.LENGTH_SHORT).show();
        }
        else {


            Map<String,String>trweitems= new HashMap<>();
            trweitems.put("In_Time",etint.getText().toString().trim());
            trweitems.put("Serial_Number",etserialnumber.getText().toString().trim());
            trweitems.put("Vehicle_Number",etvehicalnumber.getText().toString().trim());
            trweitems.put("Supplier",etsupplier.getText().toString().trim());
            trweitems.put("Material",etmaterial.getText().toString().trim());
            trweitems.put("Driver_No",etdriver.getText().toString().trim());
            trweitems.put("Customer",etcustomer.getText().toString().trim());
            trweitems.put("Oa_Number",etoanumber.getText().toString().trim());
            trweitems.put("Date",etdate.getText().toString().trim());
            trweitems.put("Gross_Weight",etgrossweight.getText().toString().trim());
            trweitems.put("Tare_Weight",ettareweight.getText().toString().trim());
            trweitems.put("Net_Weight",etnetweight.getText().toString().trim());
            trweitems.put("Density",etdensity.getText().toString().trim());
            trweitems.put("Batch_No",etbatchno.getText().toString().trim());
            trweitems.put("Sign_By",etsignby.getText().toString().trim());
            trweitems.put("Date_Time",etdatetime.getText().toString().trim());
            trweitems.put("outTime",outTime.toString());


            makeNotification(etvehicalnumber.getText().toString(),outTime.toString());
            trwdbroot.collection("Inward Truck Weighment").add(trweitems)
                    .addOnCompleteListener(new OnCompleteListener<DocumentReference>() {
                        @Override
                        public void onComplete(@NonNull Task<DocumentReference> task) {

                            etint.setText("");
                            etserialnumber.setText("");
                            etvehicalnumber.setText("");
                            etsupplier.setText("");
                            etmaterial.setText("");
                            etdriver.setText("");
                            etcustomer.setText("");
                            etoanumber.setText("");
                            etdate.setText("");
                            etgrossweight.setText("");
                            ettareweight.setText("");
                            etnetweight.setText("");
                            etdensity.setText("");
                            etbatchno.setText("");
                            etsignby.setText("");
                            etdatetime.setText("");

                            Toast.makeText(Inward_Truck_weighment.this, "Data Inserted Successfully", Toast.LENGTH_SHORT).show();
                        }
                    });
            Intent intent= new Intent(this, Inward_Truck.class);
            startActivity(intent);

            // Auto Genrated serial number
            sharedPreferences.edit().putInt("autoGeneratedNumber", autoGeneratedNumber + 1).apply();


        }
    }
}